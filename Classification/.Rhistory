fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.01))
install.packages("rpart")
library(rpart)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.01))
rpart.plot(fit)
install.packages("rpart.plot")
library("rpart", lib.loc="~/R/win-library/3.4")
library("rpart.plot", lib.loc="~/R/win-library/3.4")
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.01))
rpart.plot(fit)
summary(fit)
print(fit)
prp(fit)
plotcp(fit)
printcp(fit)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.005))
rpart.plot(fit)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.007))
rpart.plot(fit)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.009))
rpart.plot(fit)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.008))
rpart.plot(fit)
summary(fit)
print(fit)
prp(fit)
plotcp(fit)
printcp(fit)
library("InformationValue", lib.loc="~/R/win-library/3.4")
predictTrain = predict(fit, trainSplit, type="class")
confusionMatrix(predictTrain, trainSplit$survived)
predictTrain = predict(fit, trainSplit, type="class")
table(predictTrain, trainSplit$survived)
predictTest = predict(fit, testSplit, type = "class")
table(predictTest, testSplit$survived)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.0085))
rpart.plot(fit)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.009))
rpart.plot(fit)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.009))
rpart.plot(fit)
summary(fit)
print(fit)
prp(fit)
plotcp(fit)
printcp(fit)
predictTrain = predict(fit, trainSplit, type="class")
table(predictTrain, trainSplit$survived)
predictTest = predict(fit, testSplit, type = "class")
table(predictTest, testSplit$survived)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.005))
rpart.plot(fit)
summary(fit)
print(fit)
prp(fit)
plotcp(fit)
printcp(fit)
predictTrain = predict(fit, trainSplit, type="class")
table(predictTrain, trainSplit$survived)
predictTest = predict(fit, testSplit, type = "class")
table(predictTest, testSplit$survived)
fit = rpart(survived~., data=trainSplit, method="class")
rpart.plot(fit)
fit = rpart(survived~., data=trainSplit, method="class", , control=rpart.control(minsplit=10, cp=0.007))
rpart.plot(fit)
fit = rpart(survived~., data=trainSplit, method="class", , control=rpart.control(minsplit=10, cp=0.008))
rpart.plot(fit)
summary(fit)
print(fit)
prp(fit)
plotcp(fit)
printcp(fit)
predictTrain = predict(fit, trainSplit, type="class")
table(predictTrain, trainSplit$survived)
predictTest = predict(fit, testSplit, type = "class")
table(predictTest, testSplit$survived)
setwd("C:/Users/jyoti/Desktop/MachineLearning/Classification")
titanicData <- read.csv("titanic.csv")
summary(titanicData)
hist(titanicData$age)
titanicData$age[is.na(titanicData$age)] = 29.07
summary(titanicData)
head(titanicData)
titanicData$female = ifelse(titanicData$sex=="female", 1, 0)
titanicData$embarked_c = ifelse(titanicData$embarked=="C", 1, 0)
titanicData$embarked_s = ifelse(titanicData$embarked=="S", 1, 0)
titanicData$pclass = as.factor(titanicData$pclass)
titanicData$survived = as.factor(titanicData$survived)
head(titanicData)
titanicData <- titanicData[-c(3, 4, 9)]
bx = boxplot(titanicData$age)
bx$stats
quantile(titanicData$age, seq(0, 1, 0.02))
titanicData$age = ifelse(titanicData$age >= 52, 52, titanicData$age)
titanicData$age = ifelse(titanicData$age <= 4, 4, titanicData$age)
boxplot(titanicData$age)
bx = boxplot(titanicData$fare)
bx$stats
quantile(titanicData$fare, seq(0, 1, 0.02))
titanicData$fare = ifelse(titanicData$fare >= 136, 136, titanicData$fare)
boxplot(titanicData$fare)
boxplot(titanicData$age~titanicData$survived, main="Boxplot for age variable")
boxplot(titanicData$fare~titanicData$survived, main="Boxplot for fare variable")
mosaicplot(titanicData$pclass~titanicData$survived, main="Boxplot for pclass variable", color="skyblue")
mosaicplot(titanicData$female~titanicData$survived, main="Boxplot for gender vs survival analysis", color="skyblue")
mosaicplot(titanicData$embarked_c~titanicData$survived, main="Boxplot for embarkment as C variable", color="skyblue")
mosaicplot(titanicData$embarked_s~titanicData$survived, main="Boxplot for embarkment as S variable", color="skyblue")
titanicDataNumerical = data.frame(titanicData)
titanicDataNumerical$pclass = as.numeric(titanicData$pclass)
titanicDataNumerical$survived = as.numeric(titanicData$survived)
titanicDataNumerical$sibsp = as.numeric(titanicData$sibsp)
titanicDataNumerical$parch = as.numeric(titanicData$parch)
titanicDataNumerical$female = as.numeric(titanicData$female)
titanicDataNumerical$embarked_c = as.numeric(titanicData$embarked_c)
titanicDataNumerical$embarked_s = as.numeric(titanicData$embarked_s)
titanicDataNumerical$age = titanicData$age
titanicDataNumerical$fare = titanicData$fare
library(corrplot)
cor(titanicDataNumerical)
corrplot(cor(titanicDataNumerical), method="circle")
set.seed(1234)
split = sample(1:nrow(titanicData), 0.7*nrow(titanicData))
trainSplit = titanicData[split, ]
testSplit = titanicData[-split,]
print(table(trainSplit$survived))
print(table(testSplit$survived))
prop.table(table(trainSplit$survived))
prop.table(table(testSplit$survived))
fit = rpart(survived~., data=trainSplit, method="class", , control=rpart.control(minsplit=10, cp=0.008))
rpart.plot(fit)
summary(fit)
print(fit)
prp(fit)
plotcp(fit)
printcp(fit)
predictTrain = predict(fit, trainSplit, type="class")
table(predictTrain, trainSplit$survived)
predictTest = predict(fit, testSplit, type = "class")
table(predictTest, testSplit$survived)
setwd("C:/Users/jyoti/Desktop/MachineLearning/Classification")
titanicData <- read.csv("titanic.csv")
summary(titanicData)
hist(titanicData$age)
titanicData$age[is.na(titanicData$age)] = 29.07
summary(titanicData)
head(titanicData)
titanicData$female = ifelse(titanicData$sex=="female", 1, 0)
titanicData$embarked_c = ifelse(titanicData$embarked=="C", 1, 0)
titanicData$embarked_s = ifelse(titanicData$embarked=="S", 1, 0)
titanicData$pclass = as.factor(titanicData$pclass)
titanicData$survived = as.factor(titanicData$survived)
head(titanicData)
titanicData <- titanicData[-c(3, 4, 9)]
bx = boxplot(titanicData$age)
bx$stats
quantile(titanicData$age, seq(0, 1, 0.02))
titanicData$age = ifelse(titanicData$age >= 52, 52, titanicData$age)
titanicData$age = ifelse(titanicData$age <= 4, 4, titanicData$age)
boxplot(titanicData$age)
bx = boxplot(titanicData$fare)
bx$stats
quantile(titanicData$fare, seq(0, 1, 0.02))
titanicData$fare = ifelse(titanicData$fare >= 136, 136, titanicData$fare)
boxplot(titanicData$fare)
boxplot(titanicData$age~titanicData$survived, main="Boxplot for age variable")
boxplot(titanicData$fare~titanicData$survived, main="Boxplot for fare variable")
mosaicplot(titanicData$pclass~titanicData$survived, main="Boxplot for pclass variable", color="skyblue")
mosaicplot(titanicData$female~titanicData$survived, main="Boxplot for gender vs survival analysis", color="skyblue")
mosaicplot(titanicData$embarked_c~titanicData$survived, main="Boxplot for embarkment as C variable", color="skyblue")
mosaicplot(titanicData$embarked_s~titanicData$survived, main="Boxplot for embarkment as S variable", color="skyblue")
titanicDataNumerical = data.frame(titanicData)
titanicDataNumerical$pclass = as.numeric(titanicData$pclass)
titanicDataNumerical$survived = as.numeric(titanicData$survived)
titanicDataNumerical$sibsp = as.numeric(titanicData$sibsp)
titanicDataNumerical$parch = as.numeric(titanicData$parch)
titanicDataNumerical$female = as.numeric(titanicData$female)
titanicDataNumerical$embarked_c = as.numeric(titanicData$embarked_c)
titanicDataNumerical$embarked_s = as.numeric(titanicData$embarked_s)
titanicDataNumerical$age = titanicData$age
titanicDataNumerical$fare = titanicData$fare
library(corrplot)
cor(titanicDataNumerical)
corrplot(cor(titanicDataNumerical), method="circle")
set.seed(1234)
split = sample(1:nrow(titanicData), 0.7*nrow(titanicData))
trainSplit = titanicData[split, ]
testSplit = titanicData[-split,]
print(table(trainSplit$survived))
print(table(testSplit$survived))
prop.table(table(trainSplit$survived))
prop.table(table(testSplit$survived))
library(rpart)
library(rpart.plot)
fit = rpart(survived~., data=trainSplit, method="class", , control=rpart.control(minsplit=10, cp=0.008))
rpart.plot(fit)
summary(fit)
print(fit)
prp(fit)
plotcp(fit)
printcp(fit)
predictTrain = predict(fit, trainSplit, type="class")
table(predictTrain, trainSplit$survived)
predictTest = predict(fit, testSplit, type = "class")
table(predictTest, testSplit$survived)
library(rpart)
library(rpart.plot)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.01))
rpart.plot(fit)
library(rpart)
library(rpart.plot)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.009))
rpart.plot(fit)
summary(fit)
print(fit)
prp(fit)
plotcp(fit)
printcp(fit)
predictTrain = predict(fit, trainSplit, type="class")
table(predictTrain, trainSplit$survived)
setwd("C:/Users/jyoti/Desktop/MachineLearning/Classification")
titanicData <- read.csv("titanic.csv")
summary(titanicData)
hist(titanicData$age)
titanicData$age[is.na(titanicData$age)] = 29.07
summary(titanicData)
head(titanicData)
titanicData$female = ifelse(titanicData$sex=="female", 1, 0)
titanicData$embarked_c = ifelse(titanicData$embarked=="C", 1, 0)
titanicData$embarked_s = ifelse(titanicData$embarked=="S", 1, 0)
titanicData$pclass = as.factor(titanicData$pclass)
titanicData$survived = as.factor(titanicData$survived)
head(titanicData)
titanicData <- titanicData[-c(3, 4, 9)]
bx = boxplot(titanicData$age)
bx$stats
quantile(titanicData$age, seq(0, 1, 0.02))
titanicData$age = ifelse(titanicData$age >= 52, 52, titanicData$age)
titanicData$age = ifelse(titanicData$age <= 4, 4, titanicData$age)
boxplot(titanicData$age)
bx = boxplot(titanicData$fare)
bx$stats
quantile(titanicData$fare, seq(0, 1, 0.02))
titanicData$fare = ifelse(titanicData$fare >= 136, 136, titanicData$fare)
boxplot(titanicData$fare)
boxplot(titanicData$age~titanicData$survived, main="Boxplot for age variable")
boxplot(titanicData$fare~titanicData$survived, main="Boxplot for fare variable")
mosaicplot(titanicData$pclass~titanicData$survived, main="Boxplot for pclass variable", color="skyblue")
mosaicplot(titanicData$female~titanicData$survived, main="Boxplot for gender vs survival analysis", color="skyblue")
mosaicplot(titanicData$embarked_c~titanicData$survived, main="Boxplot for embarkment as C variable", color="skyblue")
mosaicplot(titanicData$embarked_s~titanicData$survived, main="Boxplot for embarkment as S variable", color="skyblue")
titanicDataNumerical = data.frame(titanicData)
titanicDataNumerical$pclass = as.numeric(titanicData$pclass)
titanicDataNumerical$survived = as.numeric(titanicData$survived)
titanicDataNumerical$sibsp = as.numeric(titanicData$sibsp)
titanicDataNumerical$parch = as.numeric(titanicData$parch)
titanicDataNumerical$female = as.numeric(titanicData$female)
titanicDataNumerical$embarked_c = as.numeric(titanicData$embarked_c)
titanicDataNumerical$embarked_s = as.numeric(titanicData$embarked_s)
titanicDataNumerical$age = titanicData$age
titanicDataNumerical$fare = titanicData$fare
library(corrplot)
cor(titanicDataNumerical)
corrplot(cor(titanicDataNumerical), method="circle")
set.seed(1234)
split = sample(1:nrow(titanicData), 0.7*nrow(titanicData))
trainSplit = titanicData[split, ]
testSplit = titanicData[-split,]
print(table(trainSplit$survived))
print(table(testSplit$survived))
prop.table(table(trainSplit$survived))
prop.table(table(testSplit$survived))
library(rpart)
library(rpart.plot)
fit = rpart(survived~., data=trainSplit, method="class", control=rpart.control(minsplit=10, cp=0.008))
rpart.plot(fit)
summary(fit)
print(fit)
prp(fit)
plotcp(fit)
printcp(fit)
predictTrain = predict(fit, trainSplit, type="class")
table(predictTrain, trainSplit$survived)
predictTest = predict(fit, testSplit, type = "class")
table(predictTest, testSplit$survived)
#Implementing linear regression in R
data <- read.csv("C:/Users/jyoti/Downloads/train.csv")
#Implementing linear regression in R
data <- read.csv("C:/Users/jyoti/Downloads/train.csv")
#Implementing linear regression in R
setwd("C:/Users/jyoti/Desktop/DataScience")
data <- read.csv("train.csv")
summary(data)
cor(data)
setwd("C:/Users/jyoti/Downloads/LogisticRegression")
data <- read.csv("titanic.csv")
View(data)
summary(data)
hist(data$age)
data$age[is.na(data$age)] = 29.07
summary(data)
head(data)
data$female = ifelse(data$sex=="female", 1, 0)
data$embarked_c = ifelse(data$embarked=="C", 1, 0)
data$embarked_s = ifelse(data$embarked=="S", 1, 0)
head(data)
data = data[-c(3, 4, 9)]
head(data)
bx = boxplot(data$age)
bx$stats
quantile(data$age, seq(0, 1, 0.02))
data$age = ifelse(data$age>=52, 52, data$age)
data$age = ifelse(data$age<=4, 4, data$age)
boxplot(data$age)
bx = boxplot(data$fare)
bx$stats
quantile(data$fare, seq(0, 1, 0.02))
data$fare = ifelse(data$fare>=136, 136, data$fare)
boxplot(data$fare)
library(car)
scatterplot(data$age, data$survived)
scatterplot(data$fare, data$survived)
set.seed(222)
t= sample(1:nrow(data), 0.7*nrow(data))
train = data[t,]
test = data[-t,]
library(car)
model <- lm(survived~., data=train)
t = vif(model)
sort(t, decreasing=TRUE)
model1<- glm(as.factor(survived)~., family="binomial", data=train)
summary(model1)
stepmodel = step(model1, direction="both")
formula(stepmodel)
summary(stepmodel)
train$score <- predict(stepmodel, newdata = train, type="response")
head(train$score)
tail(train$score)
library(lattice)
library(ggplot2)
library(caret)
library(e1071)
train$prediction <- ifelse(train$score>=0.6, 1, 0)
table(factor(train$prediction), factor(train$survived))
library(InformationValue)
plotROC(actuals=train$survived, predictedScores=as.numeric(fitted(stepmodel)))
ks_plot(actuals=train$survived, predictedScores=as.numeric(fitted(stepmodel)))
test$score<-predict(stepmodel, test, type = "response")
head(test$score)
test$predicted<-ifelse(test$score>=0.6, 1, 0)
head(test$predicted)
table(factor(test$predicted), factor(test$survived))
setwd("C:/Users/jyoti/Downloads/LogisticRegression")
data <- read.csv("train.csv")
data <- read.csv("C:/Users/jyoti/Downloads/LogisticRegression/train.csv")
View(data)
summary(data)
hist(data$age)
hist(data$Age)
data$age[is.na(data$age)] = 29.07
data$age[is.na(data$Age)] = 29.07
summary(data)
data$Age[is.na(data$Age)] = 29.07
summary(data)
data <- read.csv("C:/Users/jyoti/Downloads/LogisticRegression/train.csv")
View(data)
summary(data)
hist(data$Age)
data$Age[is.na(data$Age)] = 29.07
summary(data)
head(data)
data$female = ifelse(data$sex=="female", 1, 0)
data$female = ifelse(data$Sex=="female", 1, 0)
data$embarked_c = ifelse(data$Embarked=="C", 1, 0)
data$embarked_s = ifelse(data$Embarked=="S", 1, 0)
head(data)
PassengerData = data[-c(4, 5, 9, 11, 12)]
head(PassengerData)
bx = boxplot(PassengerData$Age)
bx$stats
quantile(PassengerData$Age, seq(0, 1, 0.02))
PassengerData$Age = ifelse(PassengerData$Age>=56, 56, PassengerData$Age)
PassengerData$Age = ifelse(PassengerData$Age<=3, 3, PassengerData$Age)
boxplot(PassengerData$Age)
bx = boxplot(PassengerData$Fare)
bx$stats
quantile(PassengerData$Fare, seq(0, 1, 0.02))
PassengerData$Fare = ifelse(PassengerData$Fare>=133.99, 133.99, PassengerData$Fare)
boxplot(PassengerData$Fare)
library(car)
scatterplot(PassengerData$Age, PassengerData$Survived)
scatterplot(PassengerData$Fare, PassengerData$Survived)
library(car)
model <- lm(Survived~PClass+Age+SibSp+Parch+Fare+female+embarked_c+embarked_s, , data=PassengerData)
library(car)
model <- lm(Survived~Pclass+Age+SibSp+Parch+Fare+female+embarked_c+embarked_s, , data=PassengerData)
t = vif(model)
sort(t, decreasing=TRUE)
model1<- glm(as.factor(survived)~Pclass+Age+SibSp+Parch+Fare+female+embarked_c+embarked_s, family="binomial", data=PassengerData)
model1<- glm(as.factor(Survived)~Pclass+Age+SibSp+Parch+Fare+female+embarked_c+embarked_s, family="binomial", data=PassengerData)
summary(model1)
stepmodel = step(model1, direction="both")
formula(stepmodel)
summary(stepmodel)
PassengerData$score <- predict(stepmodel, newdata = PassengerData, type="response")
head(PassengerData$score)
tail(PassengerData$score)
library(lattice)
library(ggplot2)
library(caret)
library(e1071)
PassengerData$prediction <- ifelse(PassengerData$score>=0.5, 1, 0)
table(factor(PassengerData$prediction), factor(PassengerData$Survived))
library(InformationValue)
plotROC(actuals=PassengerData$Survived, predictedScores=as.numeric(fitted(stepmodel)))
ks_plot(actuals=PassengerData$Survived, predictedScores=as.numeric(fitted(stepmodel)))
test <- read.csv("C:/Users/jyoti/Downloads/LogisticRegression/test.csv")
summary(test)
hist(test$Age)
test$Age[is.na(test$Age)]=30.27
summary(test)
hist(test$Fare)
test <- test[-is.na(test$Fare),]
test <- test[-is.na(test$Fare),]
summary(test)
test <- test[-c(is.na(test$Fare)),]
summary(test)
test <- read.csv("C:/Users/jyoti/Downloads/LogisticRegression/test.csv")
summary(test)
hist(test$Age)
test$Age[is.na(test$Age)]=30.27
summary(test)
hist(test$Fare)
test$Fare[is.na(test$Fare)] = 14.454
summary(test)
test$score<-predict(stepmodel, test, type = "response")
test$female = ifelse(test$Sex=="female", 1, 0)
test$embarked_c = ifelse(test$Embarked=="C", 1, 0)
test$embarked_s = ifelse(test$Embarked=="S", 1, 0)
head(test)
newtest = data.frame(test)
newtest = newtest[-c(4, 5, 9, 11, 12)]
head(newtest)
newtest = data.frame(test)
newtest = newtest[-c(1, 4, 5, 9, 11, 12)]
head(newtest)
test$female = ifelse(test$Sex=="female", 1, 0)
test$embarked_c = ifelse(test$Embarked=="C", 1, 0)
test$embarked_s = ifelse(test$Embarked=="S", 1, 0)
head(test)
newtest = data.frame(test)
newtest = newtest[-c(1, 3, 4, 8, 10, 11)]
head(newtest)
View(PassengerData)
View(PassengerData)
View(test)
View(test)
newtest = data.frame(test)
newtest = newtest[-c(1, 3, 4, 8, 10, 11)]
head(newtest)
test$score<-predict(stepmodel, test, type = "response")
head(test$score)
test$predicted<-ifelse(test$score>=0.5, 1, 0)
head(test$predicted)
submission <- data.frame(submission)
submission <- data.frame(test$PassengerId)
submission$PassengerId <- data.frame(test$PassengerId)
View(submission)
View(submission)
submission <- submission[-c(1,2)]
View(submission)
View(submission)
newtest$score<-predict(stepmodel, test, type = "response")
head(newtest$score)
newtest$score<-predict(stepmodel, newtest, type = "response")
head(newtest$score)
newtest$predicted<-ifelse(newtest$score>=0.5, 1, 0)
head(newtest$predicted)
mysubmission = data.frame(matrix(ncol=2, nrow=418))
mysubmission$PassengerId <- newtest$PassengerId
mysubmission$Survived <- newtest$predicted
View(mysubmission)
View(mysubmission)
mysubmission <- mysubmission[FALSE,]
mysubmission <- mysubmission[FALSE, -c(1, 2, 3)]
mysubmission$PassengerId <- test$PassengerId
mysubmission <- data.frame(matrix(ncol=2, nrow=418))
mysubmission$PassengerId <- test$PassengerId
mysubmission$Survived <- newtest$predicted
View(mysubmission)
View(mysubmission)
mysubmission <- data.frame()
mysubmission$PassengerId <- test$PassengerId
mysubmission$PassengerId <- data.frame(test$PassengerId)
mysubmission<- data.frame(matrix(nrow=nrow(test)))
mysubmission<- data.frame(matrix(nrow=nrow(test)))
mysubmission$PassengerId <- test$PassengerId
mysubmission$Survived <- newtest$predicted
View(mysubmission)
View(mysubmission)
mysubmission<- data.frame(matrix(nrow=nrow(test)))
mysubmission$PassengerId <- test$PassengerId
mysubmission$Survived <- newtest$predicted
mysubmission <- mysubmission[-c(1)]
View(mysubmission)
View(mysubmission)
write.csv(mysubmission, 'C:/Users/jyoti/Downloads/LogisticRegression/mysubmission.csv')
write.csv(mysubmission, 'mysubmission.csv')
View(mysubmission)
View(mysubmission)
write.csv(mysubmission, 'mysubmission.csv', row.names = FALSE)
write.csv(mysubmission, 'mysubmission1.csv', row.names = FALSE)
write.csv(mysubmission, 'mysubmission.csv', row.names = FALSE)
